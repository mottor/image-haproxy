global
    # haproxy truncates log messages with more than 1024 characters which would be problematic
    # in our case (since there defiantly would be log messages with more than 1024 characters)
    #log /dev/log len 65535 local0
    #log /dev/log len 65535 local1 notice
    log stdout format raw local0 debug

    # этот сокет нужен для управлением haproxy. В том числе - для выката API
    stats socket /var/lib/haproxy/admin.sock user haproxy group haproxy mode 660 level admin expose-fd listeners

    chroot /var/lib/haproxy
    pidfile /var/run/haproxy.pid

    user haproxy
    group haproxy
    #daemon
    maxconn 50000

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # ssl settings, as we want to get pretty result
    # @ https://www.ssllabs.com/ssltest
    tune.ssl.default-dh-param 2048

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-bind-ciphersuites TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-server-ciphersuites TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Global vars
    #{{ global_var }}
    # END Global vars

resolvers docker
    # https://docs.docker.com.zh.xy2401.com/v17.09/engine/userguide/networking/configure-dns/
    # Note: The DNS server is always at 127.0.0.11.
    nameserver dns1 127.0.0.11:53

defaults
    log	global
    mode tcp
    option dontlognull
    option logasap
    option tcplog
    #log-format '{"pid":%pid,"haproxy_frontend_type":"tcp","haproxy_process_concurrent_connections":%ac,"haproxy_frontend_concurrent_connections":%fc,"haproxy_backend_concurrent_connections":%bc,"haproxy_server_concurrent_connections":%sc,"haproxy_backend_queue":%bq,"haproxy_server_queue":%sq,"haproxy_queue_wait_time":%Tw,"haproxy_server_wait_time":%Tc,"response_time":%Td,"session_duration":%Tt,"request_termination_state":"%tsc","haproxy_server_connection_retries":%rc,"remote_addr":"%ci","remote_port":%cp,"frontend_addr":"%fi","frontend_port":%fp,"frontend_ssl_version":"%sslv","frontend_ssl_ciphers":"%sslc","haproxy_frontend_name":"%f","haproxy_backend_name":"%b","haproxy_server_name":"%s","response_size":%B,"request_size":%U}'
    #option	dontlog-normal
    #option  log-health-checks
    #option  log-separate-errors
    option  tcpka

    # sets HAProxy to add X-Forwarded-For headers to each request
    #option forwardfor

    # reduces latency between HAProxy and your users by closing connections but maintaining keep-alives
    option http-server-close

    # закрывать пассивные соединения
    option httpclose

    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           5s

    errorfile 400  /usr/local/etc/haproxy/errors/400.http
    errorfile 403  /usr/local/etc/haproxy/errors/403.http
    errorfile 408  /usr/local/etc/haproxy/errors/408.http
    errorfile 500  /usr/local/etc/haproxy/errors/500.http
    errorfile 502  /usr/local/etc/haproxy/errors/502.http
    errorfile 503  /usr/local/etc/haproxy/errors/503.http
    errorfile 504  /usr/local/etc/haproxy/errors/504.http

# ===========================================
# FRONTENDS
# ===========================================
frontend stats
    mode http
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST

frontend http
    mode tcp
    bind 0.0.0.0:80
    use_backend healthcheck_backend if { path_beg /.haproxy/healthcheck }
    default_backend bk_not_secure

frontend https
    mode tcp
    bind 0.0.0.0:443
    default_backend bk_secure

    # Wait for a client hello for at most 5 seconds
    tcp-request inspect-delay 5s
    # use tcp content accepts to detects ssl client and server hello.
    tcp-request content accept if { req_ssl_hello_type 1 }


# ===========================================
# BACKENDS
# ===========================================
backend healthcheck_backend
    http-request return status 200 content-type "text/plain" string "ALIVE" if TRUE

backend bk_not_secure
    mode tcp
    balance roundrobin

    option httpchk
    http-check connect
    http-check send meth GET uri / hdr Host lpmotor.ru
    http-check expect status 301

    default-server check observe layer4 slowstart 1m inter 5000 rise 2 fall 5 maxconn 30000 maxqueue 50000 error-limit 10 on-error mark-down on-marked-down shutdown-sessions

    # Servers list:
    # {{loop.index}}) {{ backend.domain }}
    server backend1 127.0.0.1:80


backend bk_secure
    mode tcp
    balance roundrobin

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m

    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello

    # SSL session ID (SSLID) may be present on a client or server hello.
    # Its length is coded on 1 byte at offset 43 and its value starts
    # at offset 44.
    # Match and learn on request if client hello.
    stick on payload_lv(43,1) if clienthello

    # learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option httpchk
    http-check connect ssl port 443 sni lpmotor.ru alpn h2,http/1.1
    http-check send meth GET uri / hdr Host lpmotor.ru
    http-check expect status 200

    default-server check verify none send-proxy observe layer4 slowstart 1m inter 5000 rise 2 fall 5 maxconn 30000 maxqueue 50000 error-limit 10 on-error mark-down on-marked-down shutdown-sessions

    server backend2 127.0.0.1:443
